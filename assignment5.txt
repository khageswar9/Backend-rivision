package _1_SOLID_Principles._a_Single_Responsibility;

public class SRP {
    //The Single Responsibility states that one class should only have one responsibility and only one reason
    //to change
    public static void main(String[] args) {

        //The bad example
        HDD hdd1 = new HDD(4096);
        hdd1.storeStuff();
        hdd1.workAsRam();

        //Example following the SRP
        Memory hdd = new SR_HDD(4096);
        hdd.useMemory();

        Memory ram = new SR_RAM(4096);
        ram.useMemory();

    }
}

class HDD {
    private int space;

    public HDD (int space) {
        this.space = space;
    }

    void storeStuff() {
        System.out.println("I am storing stuff now");
    }

    //This violates the SPR. Here our HDD class is doing two Things.
    //It is storing stuff for us as well as acting as the volatile memory i.e. RAM
    void workAsRam() {
        System.out.println("I am now working as RAM");
    }
}

//To fix this we will divide the above class in two parts

interface Memory {
    void useMemory();
}

class SR_HDD implements Memory {

    private int memory;

    public SR_HDD (int memory) {
        this.memory = memory;
    }

    @Override
    public void useMemory() {
        System.out.println("I am Hard disk and I just store stuff");
    }

}

class SR_RAM implements Memory {

    private int memory;

    public SR_RAM (int memory) {
        this.memory = memory;
    }

    @Override
    public void useMemory() {
        System.out.println("I am RAM and I am fast but temporary memory");
    }

}


<------------------------------------------------------------------------------------------------------------------------>




package _1_SOLID_Principles._b_Open_Closed;

public class OCP {
    public static void main(String[] args) {

        //The Open Close Principle states that our code should be closed for modification but
        //Open for Extension
        //This can be achieved by using loose coupling and extending existing classes and interfaces
        //without making changes to the existing code


    }
}

//Say we have a television that works as a tv only for now
class badOCP_myTelevision {
    //A tv can have the following properties
    private String model;
    private int refreshRate;
}

//Now say we buy a new television that can also work as a gaming monitor
//Lets say this new TVMonitor has a new property i.e. SyncType (GSync and FreeSync)

//It doesn't make sense to go back and make changes to our existing class
//But we do not have a choice since from the beginning we went for a concrete class i.e. MyTelevision

//The better approach would be to make an interface or abstract class

abstract class goodOCP_Screen {
    private String model;
    private int refreshRate;

    public goodOCP_Screen(String model, int refreshRate) {
        this.model = model;
        this.refreshRate = refreshRate;
    }
}

class Television extends goodOCP_Screen {
    private String remoteType;

    public Television (String model, int refreshRate, String remoteType) {
        super(model, refreshRate);
        this.remoteType = remoteType;
    }
}

class SuperCoolNewGamingTelevision extends goodOCP_Screen {
    private String syncType;

    public SuperCoolNewGamingTelevision(String model, int refreshRate, String syncType) {
        super(model, refreshRate);
        this.syncType = this.syncType;
    }
}

//Now we can easily extend the types of Screns we buy



<----------------------------------------------------------------------------------------------------------------------->




package _1_SOLID_Principles._d_Interface_Segregation;

public class IS {

    //Interface Segregation states that the larger interfaces should be split into smaller interfaces.
    //By doing so, we make sure that the implementing classes only need to be concerned about implementing
    //the methods that are of interest to them

    //Let us start with an example that doesn't follow the ISP
}

interface WithoutLS_WebsiteManager {
    void designFrontend();
    void writeBusinessLogic();
    void manageDatabase();
}

class frontendEngineer implements WithoutLS_WebsiteManager{

    @Override
    public void designFrontend() {
        //.... I am great at React ...EZ work
    }

    @Override
    public void writeBusinessLogic() {
        //Wait what?? I don't know how to write Business logic :(
    }

    @Override
    public void manageDatabase() {
        //More of this?? OMG... I can't do this anymore! T_T
    }
}

//This is a bad example because different people should ideally be doing all the above-mentioned
//stuff. So, when the fronted designer implements the website manager interface he will also
//have to provide implementation to the writeBusiness method and the manageDatabase methods
//Even though those are to be done by the Backend engineer and the database enginer.

//Fixing this issue is very easy. We just need to make sure that there should be no wasted
//Methods upon implementation.

interface LS_FrontendManager {
    void designFrontend();
}

interface LS_BackendManager {
    void writeBusinessLogic();

}

interface LS_DatabaseManager {
    void manageDatabase();
}

class FrontendEngineer implements LS_FrontendManager{

    @Override
    public void designFrontend() {
        //...Bring it on. I am the god of React MUHAHAHAHa
    }
}

class backendDevWithDBKnowledge implements LS_BackendManager, LS_DatabaseManager {

    @Override
    public void writeBusinessLogic() {
        //Like the title says, I am a backend engineer and can write great logic
    }

    @Override
    public void manageDatabase() {
        //Since I am a great developer I also have mastery in managing databases
    }
}